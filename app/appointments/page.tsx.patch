import React, { useState, useEffect, useRef } from "react";
=======
'use client';

import React, { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
```

```
<<<<<<< SEARCH
export default function AppointmentsPage() {
  const [doctors, setDoctors] = useState<{ id: number; name: string; specialization: string }[]>([]);
  const [services, setServices] = useState<{ id: number; name: string }[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedDoctor, setSelectedDoctor] = useState("");
  const [selectedService, setSelectedService] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [draggedItem, setDraggedItem] = useState<number | null>(null);
  const [dragOverItem, setDragOverItem] = useState<number | null>(null);
  const [sortBy, setSortBy] = useState<SortOption>("priority");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
  const dragCounter = useRef(0);
=======
export default function AppointmentsPage() {
  const router = useRouter();
  const [user, setUser] = useState<{ id: number } | null>(null);
  const [doctors, setDoctors] = useState<{ id: number; name: string; specialization: string }[]>([]);
  const [services, setServices] = useState<{ id: number; name: string }[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedDoctor, setSelectedDoctor] = useState("");
  const [selectedService, setSelectedService] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [draggedItem, setDraggedItem] = useState<number | null>(null);
  const [dragOverItem, setDragOverItem] = useState<number | null>(null);
  const [sortBy, setSortBy] = useState<SortOption>("priority");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
  const dragCounter = useRef(0);
```

```
<<<<<<< SEARCH
  useEffect(() => {
    async function fetchDoctorsAndServices() {
      try {
        const doctorsRes = await fetch('/api/doctors', { cache: 'no-store' });
        if (!doctorsRes.ok) throw new Error('Failed to fetch doctors');
        const doctorsData = await doctorsRes.json();
        setDoctors(doctorsData);

        const servicesRes = await fetch('/api/services', { cache: 'no-store' });
        if (!servicesRes.ok) throw new Error('Failed to fetch services');
        const servicesData = await servicesRes.json();
        setServices(servicesData);
      } catch (error) {
        console.error('Error fetching doctors or services:', error);
      }
    }
    fetchDoctorsAndServices();
  }, []);
=======
  useEffect(() => {
    async function checkUser() {
      try {
        const meRes = await fetch('/api/me', { cache: 'no-store', credentials: 'include' });
        if (!meRes.ok) throw new Error('Not logged in');
        const meData = await meRes.json();
        if (!meData.user?.id) throw new Error('Not logged in');
        setUser({ id: meData.user.id });
      } catch (error) {
        router.push('/login');
      }
    }
    checkUser();
  }, [router]);

  useEffect(() => {
    async function fetchDoctorsAndServices() {
      try {
        const doctorsRes = await fetch('/api/doctors', { cache: 'no-store' });
        if (!doctorsRes.ok) throw new Error('Failed to fetch doctors');
        const doctorsData = await doctorsRes.json();
        setDoctors(doctorsData);

        const servicesRes = await fetch('/api/services', { cache: 'no-store' });
        if (!servicesRes.ok) throw new Error('Failed to fetch services');
        const servicesData = await servicesRes.json();
        setServices(servicesData);
      } catch (error) {
        console.error('Error fetching doctors or services:', error);
      }
    }
    fetchDoctorsAndServices();
  }, []);
```

```
<<<<<<< SEARCH
  useEffect(() => {
    async function fetchAppointments() {
      try {
        // Fetch patientId from /api/me or other auth context
        const meRes = await fetch('/api/me', { cache: 'no-store', credentials: 'include' });
        if (!meRes.ok) throw new Error('Failed to fetch user info');
        const meData = await meRes.json();
        const patientId = meData.user.id;
        if (!patientId) throw new Error('User not logged in');

        const res = await fetch(`/api/appointments?patientId=${patientId}`, { cache: 'no-store', credentials: 'include' });
        if (!res.ok) throw new Error('Failed to fetch appointments');
        const data = await res.json();

        // Map backend appointments to local state format
        const mappedAppointments = data.appointments.map((apt: any, index: number) => ({
          id: apt.id,
          doctor: apt.doctor.name,
          service: apt.service.name,
          datetime: apt.datetime,
          status: apt.status.toLowerCase(),
          specialty: apt.doctor.specialization,
          priority: index + 1,
        }));

        setAppointments(mappedAppointments);
      } catch (error) {
        console.error('Error loading appointments:', error);
      }
    }
    fetchAppointments();
  }, []);
=======
  useEffect(() => {
    async function fetchAppointments() {
      if (!user) return;
      try {
        const res = await fetch(`/api/appointments?patientId=${user.id}`, { cache: 'no-store', credentials: 'include' });
        if (!res.ok) throw new Error('Failed to fetch appointments');
        const data = await res.json();

        // Map backend appointments to local state format
        const mappedAppointments = data.appointments.map((apt: any, index: number) => ({
          id: apt.id,
          doctor: apt.doctor.name,
          service: apt.service.name,
          datetime: apt.datetime,
          status: apt.status.toLowerCase(),
          specialty: apt.doctor.specialization,
          priority: index + 1,
        }));

        setAppointments(mappedAppointments);
      } catch (error) {
        console.error('Error loading appointments:', error);
      }
    }
    fetchAppointments();
  }, [user]);
```

```
<<<<<<< SEARCH
  const handleBookAppointment = async () => {
    if (!selectedDoctor || !selectedService || !selectedDate || !selectedTime) {
      alert("Please fill in all fields");
      return;
    }

    try {
      // Fetch patientId from /api/me or other auth context
      const meRes = await fetch('/api/me', { cache: 'no-store' });
      if (!meRes.ok) throw new Error('Failed to fetch user info');
      const meData = await meRes.json();
      const patientId = meData.user?.id;
      if (!patientId) throw new Error('User not logged in');

      const datetime = new Date(`${selectedDate}T${selectedTime}`);

      const res = await fetch('/api/appointments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          patientId,
          doctorId: Number(selectedDoctor),
          serviceId: Number(selectedService),
          datetime,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        alert(errorData.error || 'Failed to book appointment');
        console.log(errorData.error);
        return;
      }

      // Refresh appointments list
      setIsDialogOpen(false);
      setSelectedDoctor("");
      setSelectedService("");
      setSelectedDate("");
      setSelectedTime("");
      // Refetch appointments
      const updatedRes = await fetch(`/api/appointments?patientId=${patientId}`, { cache: 'no-store', credentials: 'include' });
      const updatedData = await updatedRes.json();
      const mappedAppointments = updatedData.appointments.map((apt: any, index: number) => ({
        id: apt.id,
        doctor: apt.doctor.name,
        service: apt.service.name,
        datetime: apt.datetime,
        status: apt.status.toLowerCase(),
        specialty: apt.doctor.specialty,
        priority: index + 1,
      }));
      setAppointments(mappedAppointments);
    } catch (error) {
      console.error('Error booking appointment:', error);
      alert('Failed to book appointment');
    }
  };
=======
  const handleBookAppointment = async () => {
    if (!selectedDoctor || !selectedService || !selectedDate || !selectedTime) {
      alert("Please fill in all fields");
      return;
    }

    try {
      if (!user) throw new Error('User not logged in');

      const datetime = new Date(`${selectedDate}T${selectedTime}`);

      const res = await fetch('/api/appointments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          patientId: user.id,
          doctorId: Number(selectedDoctor),
          serviceId: Number(selectedService),
          datetime,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        alert(errorData.error || 'Failed to book appointment');
        console.log(errorData.error);
        return;
      }

      // Refresh appointments list
      setIsDialogOpen(false);
      setSelectedDoctor("");
      setSelectedService("");
      setSelectedDate("");
      setSelectedTime("");
      // Refetch appointments
      const updatedRes = await fetch(`/api/appointments?patientId=${user.id}`, { cache: 'no-store', credentials: 'include' });
      const updatedData = await updatedRes.json();
      const mappedAppointments = updatedData.appointments.map((apt: any, index: number) => ({
        id: apt.id,
        doctor: apt.doctor.name,
        service: apt.service.name,
        datetime: apt.datetime,
        status: apt.status.toLowerCase(),
        specialty: apt.doctor.specialty,
        priority: index + 1,
      }));
      setAppointments(mappedAppointments);
    } catch (error) {
      console.error('Error booking appointment:', error);
      alert('Failed to book appointment');
    }
  };
```

```
<<<<<<< SEARCH
  const handleUpdateAppointment = async () => {
    if (!editAppointmentId || !editSelectedDoctor || !editSelectedService || !editSelectedDate || !editSelectedTime || !editSelectedStatus) {
      alert("Please fill in all fields");
      return;
    }

    try {
      const datetime = new Date(`${editSelectedDate}T${editSelectedTime}`);

      const res = await fetch('/api/appointments', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          appointmentId: editAppointmentId,
          doctorId: Number(editSelectedDoctor),
          serviceId: Number(editSelectedService),
          datetime,
          status: editSelectedStatus,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        alert(errorData.error || 'Failed to update appointment');
        console.log(errorData.error);
        return;
      }

      // Refresh appointments list
      // Fetch patientId from /api/me or other auth context
      const meRes = await fetch('/api/me', { cache: 'no-store', credentials: 'include' });
      if (!meRes.ok) throw new Error('Failed to fetch user info');
      const meData = await meRes.json();
      const patientId = meData.user.id;
      if (!patientId) throw new Error('User not logged in');

      const updatedRes = await fetch(`/api/appointments?patientId=${patientId}`, { cache: 'no-store', credentials: 'include' });
      const updatedData = await updatedRes.json();
      const mappedAppointments = updatedData.appointments.map((apt: any, index: number) => ({
        id: apt.id,
        doctor: apt.doctor.name,
        service: apt.service.name,
        datetime: apt.datetime,
        status: apt.status.toLowerCase(),
        specialty: apt.doctor.specialization,
        priority: index + 1,
      }));
      setAppointments(mappedAppointments);

      setIsEditDialogOpen(false);
      setEditAppointmentId(null);
      setEditSelectedDoctor("");
      setEditSelectedService("");
      setEditSelectedDate("");
      setEditSelectedTime("");
      setEditSelectedStatus("");
    } catch (error) {
      console.error('Error updating appointment:', error);
      alert('Failed to update appointment');
    }
  };
=======
  const handleUpdateAppointment = async () => {
    if (!editAppointmentId || !editSelectedDoctor || !editSelectedService || !editSelectedDate || !editSelectedTime || !editSelectedStatus) {
      alert("Please fill in all fields");
      return;
    }

    try {
      const datetime = new Date(`${editSelectedDate}T${editSelectedTime}`);

      const res = await fetch('/api/appointments', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          appointmentId: editAppointmentId,
          doctorId: Number(editSelectedDoctor),
          serviceId: Number(editSelectedService),
          datetime,
          status: editSelectedStatus,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        alert(errorData.error || 'Failed to update appointment');
        console.log(errorData.error);
        return;
      }

      // Refresh appointments list
      if (!user) throw new Error('User not logged in');
      const updatedRes = await fetch(`/api/appointments?patientId=${user.id}`, { cache: 'no-store', credentials: 'include' });
      const updatedData = await updatedRes.json();
      const mappedAppointments = updatedData.appointments.map((apt: any, index: number) => ({
        id: apt.id,
        doctor: apt.doctor.name,
        service: apt.service.name,
        datetime: apt.datetime,
        status: apt.status.toLowerCase(),
        specialty: apt.doctor.specialization,
        priority: index + 1,
      }));
      setAppointments(mappedAppointments);

      setIsEditDialogOpen(false);
      setEditAppointmentId(null);
      setEditSelectedDoctor("");
      setEditSelectedService("");
      setEditSelectedDate("");
      setEditSelectedTime("");
      setEditSelectedStatus("");
    } catch (error) {
      console.error('Error updating appointment:', error);
      alert('Failed to update appointment');
    }
  };
